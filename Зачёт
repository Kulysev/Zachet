def dfs(graph, start, visited=None):
    if visited is None:
        visited = []  
    visited.append(start)  
    print(start, end=' ')

    for neighbor in graph[start]: 
        if neighbor not in visited:
            dfs(graph, neighbor, visited) 

from collections import deque

def bfs(graph, start):
    visited = []  
    queue = deque([start])  

    while queue:
        vertex = queue.popleft()  
        if vertex not in visited:
            visited.append(vertex)  
            print(vertex, end=' ')
            queue.extend(neighbor for neighbor in graph[vertex] if neighbor not in visited)

graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

print("DFS:")
dfs(graph, 'A') 

print("\nBFS:")
bfs(graph, 'A')
